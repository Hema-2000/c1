/* program about storage classes */
1.Auto 
#include <stdio.h>  //header file
  int main()  //program starts from main function
{
 auto int p = 10,i; // initialiazation of variable(function scope)
printf("%d\n",++p);//printing the value of p
{
int p = 20; // initialization of p (block scope)
{
printf("%d\n",p); // 20 will be printed here  because it is the given local value of p
}
}
printf("%d\n",p); // 11 will be printed here since the scope of p = 20 has finally ended.
printf("%d\n",i); // it defaultly takes garbage value as 0 (0 is also a valid garbage value)
    return 0;  //return type
}
output:
11
20
11
0
2.register
#include <stdio.h>  //header file
  int main()  //program starts from main function
{
   register int x = 10;// initialiazation of variable(function scope)
   int i;

   printf("%d\n",x); // 10 will be printed here  because it is the given local value of p
   printf("%d",i);//A variable x has memory allocation in the CPU register. Here, the initial value of i, by default, is 0.

    return 0;  //return type
}
output:
10
22033
3.static
#include <stdio.h>  //header file
int func()
{
static int a=0;//local type of the static variable
int b=0;// local type of auto variable it defaulty takes auto
a++;//incrementing the variable
b++;
printf("a= %d and b= %d\n", a, b);//scope will be within the same block(until the completion of the program a variable will be alive but b disappears)
}
int main() //program execution starts from here
{
func();// calling function
func();
func();
return 0;//return type
}
output:
a= 1 and b= 1
a= 2 and b= 1
a= 3 and b= 1
4. extern
#include <stdio.h>  //header file
int main()
{
    int x=3;//initiatlization of x(until the program it may alive)
    

    extern int y; // The compiler will start searching here if a variable x has been defined and initialized in the program somewhere or not.

    printf("x =%d\n",x);//if the variable is avaible either globally or locally it may access and print it
    printf("y =%d",y);
}

int y= 20;//through out the program like global it may access
output:
x =3
y =20
